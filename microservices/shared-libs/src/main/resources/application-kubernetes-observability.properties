# Kubernetes-specific Observability Configuration for Microservices
# This configuration is used when kubernetes profile is active

# Distributed Tracing Configuration
management.tracing.enabled=true
management.tracing.sampling.probability=${TRACING_SAMPLING_PROBABILITY:1.0}
# Reduce sampling for metrics endpoints to minimize Prometheus trace spam
management.tracing.sampling.probability.metrics=0.0

# Enhanced tracing configuration
management.tracing.brave.propagation.type=w3c,b3
management.tracing.brave.span-joining-supported=true
management.tracing.brave.http.enabled=true
management.tracing.brave.messaging.enabled=true
management.tracing.brave.zipkin.endpoint=

# OpenTelemetry Configuration
management.otlp.tracing.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://tempo-tempo.monitoring.svc.cluster.local:4318}/v1/traces
otel.service.name=${OTEL_SERVICE_NAME:${spring.application.name}}
otel.resource.attributes=${OTEL_RESOURCE_ATTRIBUTES:service.name=apollo,service.version=1.0.0,environment=kubernetes}
otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://tempo-tempo.monitoring.svc.cluster.local:4318}/v1/traces
otel.exporter.otlp.protocol=${OTEL_EXPORTER_OTLP_PROTOCOL:http/protobuf}

# Additional OpenTelemetry instrumentation settings
otel.instrumentation.common.default-enabled=true
otel.instrumentation.spring-web.enabled=true
otel.instrumentation.spring-webmvc.enabled=true
otel.instrumentation.spring-webflux.enabled=true
otel.instrumentation.jdbc.enabled=true
otel.instrumentation.jpa.enabled=true
otel.instrumentation.hibernate.enabled=true
otel.instrumentation.http-url-connection.enabled=true
otel.instrumentation.okhttp.enabled=true
otel.instrumentation.lettuce.enabled=true
otel.instrumentation.reactor.enabled=true
otel.instrumentation.spring-boot-autoconfigure.enabled=true

# Trace filtering configuration - exclude health/metrics endpoints and Prometheus scraping
management.tracing.brave.http.skip-pattern=${TRACING_SKIP_PATTERN:/actuator/health.*|/actuator/prometheus.*|/actuator/metrics.*|.*:9090.*|.*prometheus.*|.*/metrics.*|.*/health.*}

# exclude Prometheus and metrics endpoints from tracing
otel.instrumentation.http.client.enabled=true
otel.instrumentation.prometheus.enabled=false
otel.instrumentation.micrometer.enabled=false


# Pyroscope Profiling Configuration - Fixed with proper environment variable names
pyroscope.application.name=${PYROSCOPE_APPLICATION_NAME:${spring.application.name}}
pyroscope.server.address=${PYROSCOPE_SERVER_ADDRESS:http://pyroscope.monitoring.svc.cluster.local:4040}
pyroscope.format=${PYROSCOPE_FORMAT:jfr}
pyroscope.profiler.event=${PYROSCOPE_PROFILER_EVENT:itimer}
pyroscope.profiler.alloc=${PYROSCOPE_PROFILER_ALLOC:512k}
pyroscope.profiler.lock=${PYROSCOPE_PROFILER_LOCK:10ms}
pyroscope.upload.interval=${PYROSCOPE_UPLOAD_INTERVAL:15s}

# Additional Metrics Configuration
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=${ENVIRONMENT:kubernetes}
management.metrics.tags.version=1.0.0
management.metrics.tags.hostname=${HOSTNAME:unknown}
management.metrics.tags.namespace=${NAMESPACE:unknown}
management.metrics.distribution.percentiles.http.server.requests=0.5,0.95,0.99
management.metrics.distribution.slo-boundaries.http.server.requests=50ms,100ms,200ms,500ms
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# Actuator Configuration for Observability
management.endpoints.web.exposure.include=health,info,metrics,prometheus,httptrace,loggers,env
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Enhanced Logging Configuration for Observability with proper trace correlation
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg trace_id=%X{traceId} span_id=%X{spanId}%n
logging.level.io.opentelemetry=INFO
logging.level.io.micrometer=INFO
# Enable OpenTelemetry debug logging when needed
logging.level.io.opentelemetry.javaagent=${OTEL_LOG_LEVEL:INFO}
logging.level.io.opentelemetry.exporter=${OTEL_LOG_LEVEL:INFO}

# HTTP Trace Configuration
management.httpexchanges.recording.enabled=true

# Additional instrumentation for Spring specific components
spring.sleuth.enabled=false
spring.zipkin.enabled=false 