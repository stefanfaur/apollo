---
# MinIO PVC for Data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: apollo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# MinIO Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: apollo
  labels:
    app: minio
    component: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
        component: storage
    spec:
      containers:
      - name: minio
        image: minio/minio:RELEASE.2024-01-16T16-07-38Z
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        ports:
        - containerPort: 9000
          name: minio
          protocol: TCP
        - containerPort: 9001
          name: console
          protocol: TCP
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: apollo-secrets
              key: minio-access-key
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: apollo-secrets
              key: minio-secret-key
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
# MinIO Service
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: apollo
  labels:
    app: minio
    component: storage
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9000"
    prometheus.io/path: "/minio/v2/metrics/cluster"
spec:
  selector:
    app: minio
  ports:
  - name: minio
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: console
    port: 9001
    targetPort: 9001
    protocol: TCP
  type: ClusterIP

---
# Job to create MinIO buckets for observability stack
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-bucket-setup
  namespace: apollo
  labels:
    app: minio-setup
    component: storage
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: minio-setup
        component: storage
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-minio
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for MinIO to be ready..."
          until nc -z minio.apollo.svc.cluster.local 9000; do
            echo "MinIO not ready, waiting..."
            sleep 5
          done
          echo "MinIO is ready!"
      containers:
      - name: create-buckets
        image: minio/mc:RELEASE.2024-01-16T16-06-34Z
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Configure MinIO client
          mc alias set minio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD
          
          # Create tempo-traces bucket for Tempo
          mc mb minio/tempo-traces --ignore-existing
          echo "Created tempo-traces bucket"
          
          # Create any additional buckets needed
          mc mb minio/loki-data --ignore-existing
          echo "Created loki-data bucket"
          
          mc mb minio/mimir-data --ignore-existing
          echo "Created mimir-data bucket"

          mc mb minio/apollo-bucket --ignore-existing
          echo "Created apollo-bucket"
          
          echo "All buckets created successfully"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: apollo-secrets
              key: minio-access-key
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: apollo-secrets
              key: minio-secret-key 